// ====== IMPORTANT ====== //
import "./immediate-init";
// ====== IMPORTANT ====== //
import { app, BaseWindow, BrowserWindow, WebContentsView } from "electron";
import { setupIntercepts } from "./intercepts";
import { registerProtocols, setupProtocols } from "./protocols/index";
import { setupMPV } from "./mpv";
import { setupIPCHandlers } from "./ipc";
import { baseWindow, mainWindowId, themeBackgroundWindow, uiWindow } from "./important-values";
import { setupScreenListeners } from "./screen-listeners";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// let baseWindow: BaseWindow;
// let themeBackgroundWindow: BrowserWindow;
// let uiWindow: BrowserWindow;
// let themeBackgroundWebView: WebContentsView;
// let mainWebContentsView: WebContentsView;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

const createWindow = (): void => {
	// Create the browser window.
	baseWindow.inner = new BaseWindow({
		width: 1920,
		height: 1080,
		fullscreen: true,
		resizable: false,
		transparent: true,
		backgroundColor: "#00000000",
		frame: false,
	});

	baseWindow.inner.on("close", () => {
		app.quit();
	});

	themeBackgroundWindow.inner = new BrowserWindow({
		parent: baseWindow.inner,
		width: 1920,
		height: 1080,
		fullscreen: true,
		resizable: false,
		transparent: true,
		backgroundColor: "#00000000",
		frame: false,
	});

	themeBackgroundWindow.inner.on("close", () => {
		app.quit();
	});

	uiWindow.inner = new BrowserWindow({
		parent: themeBackgroundWindow.inner,
		width: 1920,
		height: 1080,
		fullscreen: true,
		resizable: false,
		transparent: true,
		backgroundColor: "#00000000",
		frame: false,
		// alwaysOnTop: true,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
			disableHtmlFullscreenWindowResize: true,
			// devTools: isDev,
			// Enable node integration
			// nodeIntegration: true,
			// contextIsolation: false,
			// Explicitly isolate sub frames
			nodeIntegrationInSubFrames: false,
			//
			// webSecurity: false,
			// Override default of `webSecurity: false`
			allowRunningInsecureContent: false,
			transparent: true,
		},
	});

	mainWindowId.inner = uiWindow.inner.webContents;

	uiWindow.inner.on("close", () => {
		app.quit();
	});

	// and load the index.html of the app.
	uiWindow.inner.webContents.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	uiWindow.inner.webContents.openDevTools();

	setupMPV(baseWindow.inner);

	setupIPCHandlers();

	// mainWindow.contentView.addChildView(browserView);
};

registerProtocols();

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", setupIntercepts);
app.on("ready", setupProtocols);
app.on("ready", createWindow);
app.on("ready", setupScreenListeners)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
